
class mat16 implements tables
{
	public int[][] mat = new int[4][4];

	public mat16()
	{
	}
	public mat16(String input)
	{
		for (int i = 0; i < input.length(); i++)
		{
			mat[i / 4][(i % 4)] = input.charAt(i);
		}

	}
	public mat16(mat16 state, mat16 key)
	{
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				mat[i][j] = state.mat[i][j] ^ key.mat[i][j];
			}
		}
	}
	public mat16(mat16 source){
		copy(source.mat);
	}
	public final String toString()
	{
		String output = "";
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				output = output+((char)mat[i][j]);
			}
		}

		return output;
	}
	public final void print()
	{
		for (int i = 0; i < 4; i++)
		{
			System.out.print("\n");
			for (int j = 0; j < 4; j++)
			{
				System.out.printf(" %2x ", mat[i][j]);
			}
		}

		System.out.print("\n");
	}
	public final void substitute()
	{
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				int row = (mat[i][j] & 0xf0) >> 4;
				int column = (mat[i][j] & 0xf);
				mat[i][j] = sbox[row][column];
			}
		}

	}
	public final void iSubstitute()
	{
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				int row = (mat[i][j] & 0xf0) >> 4;
				int column = (mat[i][j] & 0xf);
				mat[i][j] = invsbox[row][column];
			}
		}

	}
	public final void lswap(int row)
	{
		int temp = mat[row][0];
		mat[row][0] = mat[row][1];
		mat[row][1] = mat[row][2];
		mat[row][2] = mat[row][3];
		mat[row][3] = temp;
	}
	public final void rswap(int row)
	{
		int temp = mat[row][3];
		mat[row][3] = mat[row][2];
		mat[row][2] = mat[row][1];
		mat[row][1] = mat[row][0];
		mat[row][0] = temp;
	}
	public final void leftshift()
	{
		for (int i = 1; i < 4; i++)
		{
			for (int j = 0; j < i; j++)
			{
				lswap(i);
			}
		}

	}
	public final void rightshift()
	{
		for (int i = 1; i < 4; i++)
		{
			for (int j = 0; j < i; j++)
			{
				rswap(i);
			}
		}

	}
	public final void matmul(int[][] mati)
	{
		int rowresult = 0;
		int flag = 0;
		int[][] maty = new int[4][4];
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{

				for (int k = 0; k < 4; k++)
				{
					int f = 0;

					if (mati[j][k] == 1)
					{
						f = mat[k][i];
						flag = 1;

					}
					else if (mat[k][i] == 1)
					{
						f = mati[j][k];
						flag = 1;
					}
					else if (mat[k][i] == 0 || mati[j][k] == 0)
					{
						f = 0;
						flag = 1;
					}
					else
					{
						f = lLookup(mat[k][i]) + lLookup(mati[j][k]);
						//printf("%x ",f);
						//cout<<lLookup(mat[k][j]) << " " <<  lLookup(mati[j][k]);
						f = f > 255 ? f - 255 : f;
					}

					if (flag == 0)
					{
				f = eLookup(f);
					}
				//printf("%2x %d ",f,flag);
				flag = 0;

					if (k == 0)
					{
						rowresult = f;
					}
					else
					{
						rowresult ^= f;
					}

				}

			maty[j][i] = rowresult;



			rowresult = 0;
			}
		}
		copy(maty);
	}
	public final int eLookup(int number)
	{

		int row = (number & 0xf0) >> 4;
		int column = (number & 0xf);
		//cout<<E[row][column]<<" ";
		return E[column][row];
	}
	public final int lLookup(int number)
	{

		int row = (number & 0xf0) >> 4;
		int column = (number & 0xf);
		//cout<<L[13][4]<<" ";
		return L[row][column];
	}
	public final void copy(int[][] source)
	{
		for (int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				mat[i][j] = source[i][j];
			}
		}

	}
	public final void stripCopy(int[] strip, int row)
	{
		for (int i = 0; i < 4; i++)
		{
			mat[row][i] = strip[i];
		}
	}
}



class strip implements tables
{
	private int[] str = new int[4];
	public strip()
	{
	}
	public strip(mat16 key, int column)
	{
		int[] sample = new int[4];
		for (int i = 0; i < 4; i++)
		{
			sample[i] = key.mat[i][column];
		}
		copy(sample);
	}
	public strip(strip first, strip second)
	{
		int[] sample = new int[4];
		for (int i = 0; i < 4; i++)
		{
			sample[i] = first.str[i] ^ second.str[i];
		}
		copy(sample);
	}
	public strip(strip first, strip second, strip third)
	{
		int[] sample = new int[4];
		for (int i = 0; i < 4; i++)
		{
			sample[i] = first.str[i] ^ second.str[i] ^ third.str[i];
		}
		copy(sample);
	}
	public final void copy(int[] sample)
	{
		for (int i = 0; i < 4; i++)
		{
			str[i] = sample[i];
		}
	}
	public final void print()
	{
		for (int i = 0; i < 4; i++)
		{
			System.out.printf("%2x ", str[i]);
		}
		System.out.print("\n");
	}
	public final void rcon(int row)
	{
		int sample[];
		sample = rcon2[row];
		copy(sample);
	}
	public final void process()
	{
		// sboxes

		str[0] = sbox[(str[0] & 0xf0) >> 4][str[0] & 0xf];

		str[1] = sbox[(str[1] & 0xf0) >> 4][str[1] & 0xf];

		str[2] = sbox[(str[2] & 0xf0) >> 4][str[2] & 0xf];

		str[3] = sbox[(str[3] & 0xf0) >> 4][str[3] & 0xf];

		// rotate
		int temp = str[0];
		str[1] = str[2];
		str[2] = str[3];
		str[3] = temp;

	}
	public final void matCopy(mat16 key, int row)
	{
		key.stripCopy(str, row);
	}

}

interface tables
{
	public static final int[][] sbox = {{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76}, {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0}, {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15}, {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75}, {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84}, {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf}, {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8}, {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2}, {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73}, {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb}, {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79}, {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08}, {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a}, {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e}, {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf}, {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};
	public static final int[][] invsbox = {{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb}, {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb}, {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e}, {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25}, {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92}, {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84}, {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06}, {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b}, {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73}, {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e}, {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b}, {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4}, {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f}, {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef}, {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61}, {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}};

	public static final int[][] mulmat = {{2,3,1,1}, {1,2,3,1}, {1,1,2,3}, {3,1,1,2}};
	public static final int[][] invmulmat = {{0x0e,0x0b,0x0d,0x09}, {0x09,0x0e,0x0b,0x0d}, {0x0d,0x09,0x0e,0x0b}, {0x0b,0x0d,0x09,0x0e}};

	public static final int[][] E = {{0x01, 0x5F, 0xE5, 0x53, 0x4C, 0x83, 0xB5, 0xFE, 0xFB, 0xC3, 0x9F, 0x9B, 0xFC, 0x45, 0x12, 0x39}, {0x03, 0xE1, 0x34, 0xF5, 0xD4, 0x9E, 0xC4, 0x19, 0x16, 0x5E, 0xBA, 0xB6, 0x1F, 0xCF, 0x36, 0x4B}, {0x05, 0x38, 0x5C, 0x04, 0x67, 0xB9, 0x57, 0x2B, 0x3A, 0xE2, 0xD5, 0xC1, 0x21, 0x4A, 0x5A, 0xDD}, {0x0F, 0x48, 0xE4, 0x0C, 0xA9, 0xD0, 0xF9, 0x7D, 0x4E, 0x3D, 0x64, 0x58, 0x63, 0xDE, 0xEE, 0x7C}, {0x11, 0xD8, 0x37, 0x14, 0xE0, 0x6B, 0x10, 0x87, 0xD2, 0x47, 0xAC, 0xE8, 0xA5, 0x79, 0x29, 0x84}, {0x33, 0x73, 0x59, 0x3C, 0x3B, 0xBD, 0x30, 0x92, 0x6D, 0xC9, 0xEF, 0x23, 0xF4, 0x8B, 0x7B, 0x97}, {0x55, 0x95, 0xEB, 0x44, 0x4D, 0xDC, 0x50, 0xAD, 0xB7, 0x40, 0x2A, 0x65, 0x07, 0x86, 0x8D, 0xA2}, {0xFF, 0xA4, 0x26, 0xCC, 0xD7, 0x7F, 0xF0, 0xEC, 0xC2, 0xC0, 0x7E, 0xAF, 0x09, 0x91, 0x8C, 0xFD}, {0x1A, 0xF7, 0x6A, 0x4F, 0x62, 0x81, 0x0B, 0x2F, 0x5D, 0x5B, 0x82, 0xEA, 0x1B, 0xA8, 0x8F, 0x1C}, {0x2E, 0x02, 0xBE, 0xD1, 0xA6, 0x98, 0x1D, 0x71, 0xE7, 0xED, 0x9D, 0x25, 0x2D, 0xE3, 0x8A, 0x24}, {0x72, 0x06, 0xD9, 0x68, 0xF1, 0xB3, 0x27, 0x93, 0x32, 0x2C, 0xBC, 0x6F, 0x77, 0x3E, 0x85, 0x6C}, {0x96, 0x0A, 0x70, 0xB8, 0x08, 0xCE, 0x69, 0xAE, 0x56, 0x74, 0xDF, 0xB1, 0x99, 0x42, 0x94, 0xB4}, {0xA1, 0x1E, 0x90, 0xD3, 0x18, 0x49, 0xBB, 0xE9, 0xFA, 0x9C, 0x7A, 0xC8, 0xB0, 0xC6, 0xA7, 0xC7}, {0xF8, 0x22, 0xAB, 0x6E, 0x28, 0xDB, 0xD6, 0x20, 0x15, 0xBF, 0x8E, 0x43, 0xCB, 0x51, 0xF2, 0x52}, {0x13, 0x66, 0xE6, 0xB2, 0x78, 0x76, 0x61, 0x60, 0x3F, 0xDA, 0x89, 0xC5, 0x46, 0xF3, 0x0D, 0xF6}, {0x35, 0xAA, 0x31, 0xCD, 0x88, 0x9A, 0xA3, 0xA0, 0x41, 0x75, 0x80, 0x54, 0xCA, 0x0E, 0x17, 0x01}};

	public static final int[][] L = {{0xff, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1A, 0xC6, 0x4B, 0xC7, 0x1B, 0x68, 0x33, 0xEE, 0xDF, 0x03}, {0x64, 0x04, 0xE0, 0x0E, 0x34, 0x8D, 0x81, 0xEF, 0x4C, 0x71, 0x08, 0xC8, 0xF8, 0x69, 0x1C, 0xC1}, {0x7D, 0xC2, 0x1D, 0xB5, 0xF9, 0xB9, 0x27, 0x6A, 0x4D, 0xE4, 0xA6, 0x72, 0x9A, 0xC9, 0x09, 0x78}, {0x65, 0x2F, 0x8A, 0x05, 0x21, 0x0F, 0xE1, 0x24, 0x12, 0xF0, 0x82, 0x45, 0x35, 0x93, 0xDA, 0x8E}, {0x96, 0x8F, 0xDB, 0xBD, 0x36, 0xD0, 0xCE, 0x94, 0x13, 0x5C, 0xD2, 0xF1, 0x40, 0x46, 0x83, 0x38}, {0x66, 0xDD, 0xFD, 0x30, 0xBF, 0x06, 0x8B, 0x62, 0xB3, 0x25, 0xE2, 0x98, 0x22, 0x88, 0x91, 0x10}, {0x7E, 0x6E, 0x48, 0xC3, 0xA3, 0xB6, 0x1E, 0x42, 0x3A, 0x6B, 0x28, 0x54, 0xFA, 0x85, 0x3D, 0xBA}, {0x2B, 0x79, 0x0A, 0x15, 0x9B, 0x9F, 0x5E, 0xCA, 0x4E, 0xD4, 0xAC, 0xE5, 0xF3, 0x73, 0xA7, 0x57}, {0xAF, 0x58, 0xA8, 0x50, 0xF4, 0xEA, 0xD6, 0x74, 0x4F, 0xAE, 0xE9, 0xD5, 0xE7, 0xE6, 0xAD, 0xE8}, {0x2C, 0xD7, 0x75, 0x7A, 0xEB, 0x16, 0x0B, 0xF5, 0x59, 0xCB, 0x5F, 0xB0, 0x9C, 0xA9, 0x51, 0xA0}, {0x7F, 0x0C, 0xF6, 0x6F, 0x17, 0xC4, 0x49, 0xEC, 0xD8, 0x43, 0x1F, 0x2D, 0xA4, 0x76, 0x7B, 0xB7}, {0xCC, 0xBB, 0x3E, 0x5A, 0xFB, 0x60, 0xB1, 0x86, 0x3B, 0x52, 0xA1, 0x6C, 0xAA, 0x55, 0x29, 0x9D}, {0x97, 0xB2, 0x87, 0x90, 0x61, 0xBE, 0xDC, 0xFC, 0xBC, 0x95, 0xCF, 0xCD, 0x37, 0x3F, 0x5B, 0xD1}, {0x53, 0x39, 0x84, 0x3C, 0x41, 0xA2, 0x6D, 0x47, 0x14, 0x2A, 0x9E, 0x5D, 0x56, 0xF2, 0xD3, 0xAB}, {0x44, 0x11, 0x92, 0xD9, 0x23, 0x20, 0x2E, 0x89, 0xB4, 0x7C, 0xB8, 0x26, 0x77, 0x99, 0xE3, 0xA5}, {0x67, 0x4A, 0xED, 0xDE, 0xC5, 0x31, 0xFE, 0x18, 0x0D, 0x63, 0x8C, 0x80, 0xC0, 0xF7, 0x70, 0x07}};

	public static int[][] rcon2 = {{0x01,0x00,0x00,0x00}, {0x02,0x00,0x00,0x00}, {0x04,0x00,0x00,0x00}, {0x08,0x00,0x00,0x00}, {0x10,0x00,0x00,0x00}, {0x20,0x00,0x00,0x00}, {0x40,0x00,0x00,0x00}, {0x80,0x00,0x00,0x00}, {0x1B,0x00,0x00,0x00}, {0x36,0x00,0x00,0x00}};
}


public class GlobalMembersAes implements tables
{




	public static String padInput(String input)
	{
		String temp = new String(new char[1]);
		temp = String.format("%c", '&');
		while (input.length() % 16 != 0)
		{
			input = input + (temp);
		}
		return input;
	}

	public static String unPadInput(String input)
	{
		int i = 0;
		if(input.indexOf('&') == -1){
			System.out.print("Asd");
			return input;
		}
		while (input.charAt(i) != '&')
		{
			i++;
		}
		return input.substring(0, i);
	}


	public static mat16[] keyExpand(mat16[] expand, mat16 key)
	{

		expand[0] = key;
		for (int i = 1; i < 10; i++)
		{
			mat16 current = expand[i - 1];
			strip one = new strip(expand[i - 1], 3);
			one.process();
			strip two = new strip();
			two.rcon(i);
			strip three = new strip(expand[i - 1], 0);
			strip final2 = new strip(one, two, three);
			final2.matCopy(current, 0);
			strip m1 = new strip(new strip(expand[i - 1], 1), final2);
			m1.matCopy(current, 1);
			strip m2 = new strip(new strip(expand[i - 1], 2), m1);
			m2.matCopy(current, 2);
			strip m3 = new strip(new strip(expand[i - 1], 3), m2);
			m3.matCopy(current, 3);
			expand[i] = current;
		}
		return expand;
	}

	public static String encrypt16(String input, String key)
	{

		mat16 inp = new mat16(input);
		mat16 ke = new mat16(key);
		mat16[] expand = new mat16[10];

		GlobalMembersAes.keyExpand(expand, ke);
		mat16[] eKey = expand;

		for (int i = 0; i < 10; i++)
		{
			inp = new mat16(inp, eKey[i]);
			inp.rightshift();
			inp.substitute();
			inp.matmul(mulmat);
		}
		return inp.toString();
	}

	public static String decrypt16(String input, String key)
	{

		mat16 inp = new mat16(input);
		mat16 ke = new mat16(key);
		mat16[] expand = new mat16[10];

		expand = GlobalMembersAes.keyExpand(expand, ke);

		mat16[] eKey = expand;

		for (int i = 9; i >= 0; i--)
		{
			inp.matmul(invmulmat);
			inp.iSubstitute();
			inp.leftshift();
			inp = new mat16(inp, eKey[i]);
		}
		return inp.toString();
	}

	public static void charprint(String A)
	{
		for (int i = 0; i < A.length(); i++)
		{
			System.out.print(A.charAt(i));
			System.out.print(" ");
			if (i % 16 == 0)
			{
				System.out.print("\n");
			}

		}
	}

	public static String encrypt(String input, String key)
	{
		input = padInput(input);
		key = padInput(key);
		if (input.length() <= 16)
		{
			return GlobalMembersAes.encrypt16(input, key);
		}
		else
		{
			int i = 0;
			String result = "";
			while (true)
			{
				int secondIndex = 0;
				if (i + 16 >= input.length())
				{
					secondIndex = input.length();
				}
				else
				{
					secondIndex = i + 16;
				}
				result+=(GlobalMembersAes.encrypt16(input.substring(i, secondIndex), key));
				if (i + 16 >= input.length())
				{
					return result;
				}
				i = i + 16;

			}
		}
	}

	public static String decrypt(String input, String key)
	{
		key = padInput(key);
		if (input.length() <= 16)
		{
			return unPadInput(GlobalMembersAes.decrypt16(input, key));
		}
		else
		{
			int i = 0;
			String result = "";
			while (true)
			{
				int secondIndex = 0;
				if (i + 16 >= input.length())
				{
					secondIndex = input.length();
				}
				else
				{
					secondIndex = i + 16;
				}
				//cout <<  input.substr( i, secondIndex - i )  << endl;
				result+=(GlobalMembersAes.decrypt16(input.substring(i, secondIndex), key));
				if (i + 16 >= input.length())
				{
					return unPadInput(result);
				}
				i = i + 16;

			}
		}
	}
}
